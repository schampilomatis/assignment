from django.db import models
from django.contrib.auth.models import User
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager,PermissionsMixin
from django.conf import settings
from stdimage.models import StdImageField
from django.utils import timezone
from django.conf import settings

#for $model in $model_list
#if 'custom_user' in $model and $model.custom_user
class CustomUserManager(BaseUserManager):
    def create_user(self, email, date_of_birth, password=None):
        self._create_user(email, password, False, False,
                                 **extra_fields)

    def create_superuser(self, email, password, **extra_fields):
        self._create_user(email, password, True, True,
                                 **extra_fields)

    def _create_user(self, email, password,
                     is_staff, is_superuser, **extra_fields):
        """
        Creates and saves a User with the given email and password.
        """
        now = timezone.now()
        if not email:
            raise ValueError('The given email must be set')
        email = self.normalize_email(email)
        user = self.model(email=email,
                          is_staff=is_staff, is_active=True,
                          is_superuser=is_superuser, last_login=now,
                          date_joined=now, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user
#end if

class ${model.name}(#slurp
#if 'custom_user' in $model and $model.custom_user
AbstractBaseUser, PermissionsMixin#slurp
#else if 'inherits' in $model
${model.inherits}#slurp
#else
models.Model#slurp
#end if
):
    #for $field in $model.fields
    ${field.name} = ${field.type}(#slurp
#if $field.type == 'models.OneToOneField' or $field.type == 'models.ForeignKey' or $field.type == 'models.ManyToManyField'
${field.key}#slurp
#else
'${field.name}'#slurp
#end if
#if 'default' in $field
#if $field.type == 'models.BooleanField'
, default = $field.default #slurp
#else
, default = '${field.default}' #slurp
#end if
#end if
#if $field.type == 'models.CharField'
, max_length=${field.max_length} #slurp
#end if
#if $field.type != 'models.BooleanField' and $field.type != 'models.OneToOneField'
, null=${field.null}, blank=${field.blank} #slurp
#end if
#if 'related_name' in $field
, related_name='${field.related_name}'#slurp
#end if
#if $field.type == 'StdImageField'
    ,upload_to='${field.upload_to}'#slurp
#end if
#if 'unique' in $field and $field.unique
, unique=True
#end if
#if $field.type == 'models.DateTimeField'
, auto_now_add = ${field.auto_now_add} #slurp
, auto_now = ${field.auto_now} #slurp
#end if
)
    #end for
#if 'custom_user' in $model and $model.custom_user
    objects = CustomUserManager()
    USERNAME_FIELD = '${model.username_field}'
    REQUIRED_FIELDS = [#slurp

#for $item in $model.required_fields
'${item}',#slurp
#end for
    ]

    def get_full_name(self):
        return self.email
    
    def get_short_name(self):
        return self.get_full_name()
#end if

    def __unicode__(self):
        return self.name
#if 'abstract' in $model and $model.abstract
    class Meta:
        abstract = True
#end if

#end for

